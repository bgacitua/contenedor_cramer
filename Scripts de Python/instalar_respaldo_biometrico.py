#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INSTALADOR DEL SISTEMA DE RESPALDO AUTOMATIZADO
==============================================

Este script configura autom√°ticamente el sistema de respaldo biom√©trico:
- Instala dependencias necesarias
- Crea estructura de directorios
- Configura programaci√≥n autom√°tica (opcional)
- Ejecuta prueba inicial del sistema

Ejecutar como administrador para configuraci√≥n completa.
"""

import sys
import subprocess
import os
from pathlib import Path
import datetime

def imprimir_banner():
    """Muestra el banner del instalador"""
    print("=" * 70)
    print("üîß INSTALADOR - SISTEMA DE RESPALDO BIOM√âTRICO AUTOMATIZADO")
    print("=" * 70)
    print(f"üìÖ Fecha: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üéØ Objetivo: Configurar respaldos autom√°ticos del sistema biom√©trico")
    print("=" * 70)

def verificar_python():
    """Verifica la versi√≥n de Python"""
    print("\n1Ô∏è‚É£ VERIFICANDO PYTHON...")
    version = sys.version_info
    print(f"   üêç Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 7):
        print("   ‚ùå ERROR: Se requiere Python 3.7 o superior")
        return False
    
    print("   ‚úÖ Versi√≥n de Python compatible")
    return True

def instalar_dependencias():
    """Instala las librer√≠as necesarias"""
    print("\n2Ô∏è‚É£ INSTALANDO DEPENDENCIAS...")
    
    dependencias = [
        'pandas',
        'pyodbc',
        'pathlib',
        'openpyxl'
    ]
    
    for dep in dependencias:
        try:
            print(f"   üì¶ Instalando {dep}...")
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', dep, '--quiet'])
            print(f"   ‚úÖ {dep} instalado correctamente")
        except subprocess.CalledProcessError:
            print(f"   ‚ö†Ô∏è Error al instalar {dep}, puede que ya est√© instalado")
    
    print("   ‚úÖ Proceso de instalaci√≥n de dependencias completado")

def crear_estructura_directorios():
    """Crea la estructura de directorios necesaria"""
    print("\n3Ô∏è‚É£ CREANDO ESTRUCTURA DE DIRECTORIOS...")
    
    base_dir = Path(r"C:\Users\bgacitua\Desktop\Repositorio_GitHub\Scripts de Python")
    directorios = [
        base_dir / "Respaldos_Biometrico",
        base_dir / "Logs",
        base_dir / "Configuracion"
    ]
    
    for directorio in directorios:
        try:
            directorio.mkdir(parents=True, exist_ok=True)
            print(f"   üìÅ {directorio.name}: ‚úÖ Creado/Verificado")
        except Exception as e:
            print(f"   üìÅ {directorio.name}: ‚ùå Error - {str(e)}")
    
    print("   ‚úÖ Estructura de directorios configurada")

def verificar_conexion_bd():
    """Verifica la conexi√≥n a la base de datos"""
    print("\n4Ô∏è‚É£ VERIFICANDO CONEXI√ìN A BASE DE DATOS...")
    
    try:
        import pyodbc
        
        # Configuraci√≥n de conexi√≥n
        SERVER = '192.9.200.84'
        DATABASE = 'MorphoManager'
        USERNAME = 'rrhh_morpho'
        PASSWORD = 'PQ90@ZT*'
        
        connection_string = (
            'DRIVER={ODBC Driver 17 for SQL Server};'
            f'SERVER={SERVER};'
            f'DATABASE={DATABASE};'
            f'UID={USERNAME};'
            f'PWD={PASSWORD};'
            'TrustServerCertificate=yes;'
        )
        
        print("   üîå Intentando conectar...")
        cnxn = pyodbc.connect(connection_string)
        cnxn.close()
        
        print("   ‚úÖ Conexi√≥n a SQL Server exitosa")
        print(f"   üè¢ Servidor: {SERVER}")
        print(f"   üóÑÔ∏è Base de datos: {DATABASE}")
        return True
        
    except ImportError:
        print("   ‚ùå Error: pyodbc no est√° instalado")
        return False
    except pyodbc.Error as e:
        print(f"   ‚ùå Error de conexi√≥n: {str(e)}")
        print("   üí° Verifique credenciales y conectividad de red")
        return False

def crear_archivo_prueba():
    """Crea un archivo de prueba del sistema"""
    print("\n5Ô∏è‚É£ EJECUTANDO PRUEBA DEL SISTEMA...")
    
    try:
        # Importar el sistema de respaldo
        sys.path.append(str(Path(__file__).parent))
        from respaldo_biometrico_automatizado import RespaldoBiometrico
        
        print("   üß™ Inicializando sistema de respaldo...")
        respaldo = RespaldoBiometrico()
        
        print("   üß™ Ejecutando respaldo de prueba...")
        exito = respaldo.ejecutar_respaldo()
        
        if exito:
            print("   ‚úÖ Prueba ejecutada exitosamente")
            print("   üìÅ Verifique la carpeta 'Respaldos_Biometrico' para el archivo generado")
            return True
        else:
            print("   ‚ùå Error en la prueba del sistema")
            return False
            
    except ImportError as e:
        print(f"   ‚ùå Error al importar m√≥dulo: {str(e)}")
        print("   üí° Aseg√∫rese de que 'respaldo_biometrico_automatizado.py' est√© en la misma carpeta")
        return False
    except Exception as e:
        print(f"   ‚ùå Error inesperado en prueba: {str(e)}")
        return False

def crear_script_programacion():
    """Crea script para programaci√≥n en Windows"""
    print("\n6Ô∏è‚É£ CREANDO SCRIPT DE PROGRAMACI√ìN...")
    
    base_dir = Path(r"C:\Users\bgacitua\Desktop\Repositorio_GitHub\Scripts de Python")
    script_path = base_dir / "ejecutar_respaldo_biometrico.bat"
    
    contenido_bat = f"""@echo off
REM Script para ejecutar respaldo biom√©trico automatizado
REM Creado autom√°ticamente por el instalador

echo ========================================
echo EJECUTANDO RESPALDO BIOMETRICO AUTOMATIZADO
echo ========================================
echo Fecha: %date% %time%
echo ========================================

cd /d "{base_dir}"
python "respaldo_biometrico_automatizado.py"

echo ========================================
echo RESPALDO COMPLETADO
echo ========================================
pause
"""
    
    try:
        script_path.write_text(contenido_bat, encoding='utf-8')
        print(f"   üìÑ Script creado: {script_path}")
        print("   üí° Use este archivo para programar tareas autom√°ticas en Windows")
        
        # Instrucciones de programaci√≥n
        print("\n   üìã INSTRUCCIONES PARA PROGRAMACI√ìN AUTOM√ÅTICA:")
        print("   1. Abra 'Programador de tareas' de Windows")
        print("   2. Cree una nueva tarea b√°sica")
        print("   3. Configure para ejecutar diariamente a las 23:30")
        print(f"   4. Seleccione el archivo: {script_path}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error al crear script: {str(e)}")
        return False

def mostrar_resumen_instalacion():
    """Muestra el resumen de la instalaci√≥n"""
    print("\n" + "=" * 70)
    print("üìã RESUMEN DE INSTALACI√ìN")
    print("=" * 70)
    
    base_dir = Path(r"C:\Users\bgacitua\Desktop\Repositorio_GitHub\Scripts de Python")
    
    archivos_esperados = [
        "respaldo_biometrico_automatizado.py",
        "config_respaldo_biometrico.conf",
        "ejecutar_respaldo_biometrico.bat"
    ]
    
    print("\nüìÅ ARCHIVOS DEL SISTEMA:")
    for archivo in archivos_esperados:
        ruta = base_dir / archivo
        if ruta.exists():
            print(f"   ‚úÖ {archivo}")
        else:
            print(f"   ‚ùå {archivo} - NO ENCONTRADO")
    
    print("\nüìÅ DIRECTORIOS:")
    directorios = ["Respaldos_Biometrico", "Logs"]
    for directorio in directorios:
        ruta = base_dir / directorio
        if ruta.exists():
            print(f"   ‚úÖ {directorio}/")
        else:
            print(f"   ‚ùå {directorio}/ - NO ENCONTRADO")
    
    print("\nüöÄ PR√ìXIMOS PASOS:")
    print("   1. Configure la programaci√≥n autom√°tica usando el archivo .bat")
    print("   2. Verifique que los respaldos se generen correctamente")
    print("   3. Revise los logs en la carpeta 'Logs' para monitoreo")
    print("   4. Ajuste la configuraci√≥n en 'config_respaldo_biometrico.conf' si es necesario")
    
    print("\nüìû SOPORTE:")
    print("   - Los logs se guardan en la carpeta 'Logs'")
    print("   - Los respaldos se almacenan en 'Respaldos_Biometrico'")
    print("   - Para cambios de configuraci√≥n, edite el archivo .conf")

def main():
    """Funci√≥n principal del instalador"""
    imprimir_banner()
    
    pasos_completados = 0
    total_pasos = 6
    
    # Ejecutar pasos de instalaci√≥n
    if verificar_python():
        pasos_completados += 1
    
    instalar_dependencias()
    pasos_completados += 1
    
    crear_estructura_directorios()
    pasos_completados += 1
    
    if verificar_conexion_bd():
        pasos_completados += 1
    
    if crear_archivo_prueba():
        pasos_completados += 1
    
    if crear_script_programacion():
        pasos_completados += 1
    
    # Mostrar resumen
    mostrar_resumen_instalacion()
    
    # Resultado final
    print("\n" + "=" * 70)
    if pasos_completados == total_pasos:
        print("‚úÖ INSTALACI√ìN COMPLETADA EXITOSAMENTE")
        print(f"üìä {pasos_completados}/{total_pasos} pasos completados")
        print("üöÄ El sistema est√° listo para funcionar autom√°ticamente")
    else:
        print("‚ö†Ô∏è INSTALACI√ìN COMPLETADA CON ADVERTENCIAS")
        print(f"üìä {pasos_completados}/{total_pasos} pasos completados")
        print("üí° Revise los errores anteriores y configure manualmente si es necesario")
    
    print("=" * 70)
    
    input("\nPresione ENTER para finalizar...")

if __name__ == "__main__":
    main()
